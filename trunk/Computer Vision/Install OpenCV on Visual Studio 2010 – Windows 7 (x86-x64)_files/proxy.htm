<!DOCTYPE html>
<!-- saved from url=(0068)https://public-api.wordpress.com/rest/v1/proxy#http://widgets.wp.com -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<script type="text/javascript" src="saved_resource(4)"></script><style type="text/css"></style>
<script>
(function() {
var receiveMessage, sendMessage, sendError, cookies, cookie = '', i, ajaxSetup = { dataType: 'json' },
    bufferMessage = true, emptyBuffer, buffer = [],
    origin = window.location.hash.replace( '#', '' ).split( '/', 3 ).join( '/' ),
    giveMeAccessToAllUsersBlogs = false,
    usePM = false,
    headersWhiteList = ['Date', 'Content-Type'], // headers provided to the proxied callback
    getResponseHeaders;

var originWhitelist = [
	// widgets.wp.com hosts the Like button
	'http://widgets.wp.com',
	'https://widgets.wp.com'
];

if ( !origin ) {
	return;
}

receiveMessage = function( event ) {
	var data, sendAsString = false;

	if ( !usePM ) {
		if ( 'string' === typeof event ) {
			event = JSON.parse( event );
		}

		if ( origin !== event.origin ) {
			return;
		}

		if ( bufferMessage ) {
			buffer.push( { data: event.data, origin: event.origin } );
			return;
		}

		if ( 'string' === typeof event.data ) {
			data = JSON.parse( event.data );
			sendAsString = true;
		} else {
			data = event.data;
		}
	} else {
		if ( bufferMessage ) {
			buffer.push( event );
			return;
		}

		data = event;
	}

	if ( 'undefined' !== typeof data.metaAPI && data.metaAPI ) {
		if ( 'undefined' !== typeof data.metaAPI.accessAllUsersBlogs ) {
			giveMeAccessToAllUsersBlogs = !!data.metaAPI.accessAllUsersBlogs; // (bool)
		}

		sendMessage( data.callback, sendAsString )( data.metaAPI );
		return;
	}

	var url = window.location.protocol + '//public-api.wordpress.com/rest/v1' + data.path + '?http_envelope=1';
	if ( data.query ) {
		if ( 'string' === typeof data.query ) {
			url += '&' + data.query.replace( /^&/, '' );
		} else {
			url += '&' + jQuery.param( data.query );
		}
	}
	var acceptsVariableArgs = data.supports_args;
	jQuery.ajax( {
		url : url,
		type : data.method,
		success : sendMessage( data.callback, sendAsString, acceptsVariableArgs ),
		error : sendError( data.callback, sendAsString ),
		data : 'POST' === data.method ? data.body : null
	} );
};

// IE 8 has postMessage, but uses attachEvent instead of addEventListener
if ( window.postMessage && ( window.addEventListener || window.attachEvent ) ) {
	// jQuery abstracts this away for us
	jQuery(window).on( 'message', function( e ) { receiveMessage( e.originalEvent ); } );
} else {
	usePM = true;
	pm.bind( 'proxy', receiveMessage );
}

cookies = document.cookie.split( /;\s*/ );
for ( i = 0; i < cookies.length; i++ ) {
	if ( cookies[i].match( /^wp_api=/ ) ) {
		cookies = cookies[i].split( '=' );
		cookie = cookies[1];
		break;
	}
}

if ( cookie ) {
	ajaxSetup['beforeSend'] = function( jqXHR ) {
		if ( giveMeAccessToAllUsersBlogs ) {
			jqXHR.setRequestHeader( 'Authorization', 'X-WPCOOKIE ' + cookie + ':1:' + origin );
		} else {
			jqXHR.setRequestHeader( 'Authorization', 'X-WPCOOKIE ' + cookie + ':0:' + origin );
		}
	};
}

jQuery.ajaxSetup( ajaxSetup );

emptyBuffer = function(){
	var event;
	while(event = buffer.shift()){
		receiveMessage( event );
	}
}

if ( jQuery.inArray( origin, originWhitelist ) > -1 ) {
	bufferMessage = false;
	emptyBuffer();
}
else {
	jQuery.get( window.location.protocol + '//public-api.wordpress.com/rest/v1/sites/' + encodeURIComponent( origin ) + '?http_envelope=1&check_wpcom=1' ).done( function( response ) {
		if ( 'undefined' === typeof response.code || 200 !== response.code || 'undefined' === typeof response.body.isWPcom || true !== response.body.isWPcom ) {
			window.removeEventListener( 'message', receiveMessage );
			buffer = [];
			return;
		}
		bufferMessage = false;
		emptyBuffer();
	} );
}

sendMessage = function( callback, sendAsString, acceptsVariableArgs ) {
	return function( data, textStatus, jqXHR ) {
		var headers = getResponseHeaders(data, jqXHR), 
		    info = [ data.body, data.code, headers, callback ];
		// For older versions of wpcom-proxy-request that only accept 2 args and callback
		if ( !acceptsVariableArgs ) {
			info = [ data.body, data.code, callback ];
		};
		if ( sendAsString ) {
			info = JSON.stringify( info );
		}
		if ( !usePM ) {
			window.parent.postMessage( info, origin );
		} else {
			pm( {
				data:   info,
				type:   'proxy',
				target: window.parent,
				origin: origin
			} );
		}
	}
};

getResponseHeaders = function( data, jqXHR ){
	var envelopeHeaders = [],
		headers = {},
		whiteListed = {},
		hasXHR = jqXHR && 'function' === typeof(jqXHR.getResponseHeader);
	if ( data && data.headers ) {
		envelopeHeaders = data.headers;
	};
	// first pull out any of the envelope headers with a case-insensitive match
	jQuery.each(envelopeHeaders, function(i, header){
		headers[header.name.toUpperCase()] = header.value;
	});
	// loop through the white-listed headers and grab the enveloped headers if available,
	// otherwise getResponseHeader if we can
	jQuery.each(headersWhiteList, function(i, headerName){
		var headerNameUpper = headerName.toUpperCase();
		if ( headers[headerNameUpper]) {
			whiteListed[headerName] = headers[headerNameUpper];
		} else if (hasXHR) {
			whiteListed[headerName] = jqXHR.getResponseHeader(headerName);
		}
	});
	return whiteListed;
}

sendError = function( callback, sendAsString ) {
	return function() {
		var info;
		if ( sendAsString ) {
			info = JSON.stringify( [ 'error', 0, callback ] );
		} else {
			info = [ 'error', 0, callback ];
		}

		if ( !usePM ) {
			window.parent.postMessage( info, origin );
		} else {
			pm( {
				data:   info,
				type:   'proxy',
				target: window.parent,
				origin: origin
			} );
		}
	}
};

})();
</script>
</head><div id="Eg60KYc0JgM6VlPv" class="Jsm3xUFCaK_k63ZrNVbfG7cHlX" style="display: none;"></div><div id="sdHvKupoM0CRhRRmm" class="Jsm3xUFCaK_k63ZrNVbfG7cHlX" style="display: none;"></div><div id="O6IVm0PVHM9qpY1c3Wx" class="Jsm3xUFCaK_k63ZrNVbfG7cHlX" style="display: none;"></div>
<body style="">
<div><div id="SL_button" class="ImTranslatorLogo"></div><div id="SL_shadow_translation_result2" style="display: none;"></div><div id="SL_shadow_translator" style="display: none;"><div id="SL_planshet"><div id="SL_TB"><div class="ImTranslatorLogo"></div><table cellspacing="1" id="SL_tables"><tbody><tr><td align="left" width="20%"><div id="SL_lng_from">English&nbsp;Â»</div></td><td align="left" width="20%"><select id="SL_lng_to"><option value="af">Afrikaans</option><option value="sq">Albanian</option><option value="ar">Arabic</option><option value="hy">Armenian</option><option value="az">Azerbaijani</option><option value="eu">Basque</option><option value="bn">Bengali</option><option value="be">Belarusian</option><option value="bg">Bulgarian</option><option value="ca">Catalan</option><option value="zh-CN">Chinese&nbsp;(Siml.)</option><option value="zh-TW">Chinese&nbsp;(Trad.)</option><option value="hr">Croatian</option><option value="cs">Czech</option><option value="da">Danish</option><option value="nl">Dutch</option><option value="en">English</option><option value="eo">Esperanto</option><option value="et">Estonian</option><option value="tl">Filipino</option><option value="fi">Finnish</option><option value="fr">French</option><option value="gl">Galician</option><option value="ka">Georgian</option><option value="de">German</option><option value="el">Greek</option><option value="gu">Gujarati</option><option value="ht">Haitian&nbsp;Creole</option><option value="iw">Hebrew</option><option value="hi">Hindi</option><option value="hu">Hungarian</option><option value="is">Icelandic</option><option value="id">Indonesian</option><option value="ga">Irish</option><option value="it">Italian</option><option value="ja">Japanese</option><option value="kn">Kannada</option><option value="ko">Korean</option><option value="lo">Lao</option><option value="la">Latin</option><option value="lv">Latvian</option><option value="lt">Lithuanian</option><option value="mk">Macedonian</option><option value="ms">Malay</option><option value="mt">Maltese</option><option value="no">Norwegian</option><option value="fa">Persian</option><option value="pl">Polish</option><option value="pt">Portuguese</option><option value="ro">Romanian</option><option value="ru">Russian</option><option value="sr">Serbian</option><option value="sk">Slovak</option><option value="sl">Slovenian</option><option selected="" value="es">Spanish</option><option value="sw">Swahili</option><option value="sv">Swedish</option><option value="ta">Tamil</option><option value="te">Telugu</option><option value="th">Thai</option><option value="tr">Turkish</option><option value="uk">Ukrainian</option><option value="ur">Urdu</option><option value="vi">Vietnamese</option><option value="cy">Welsh</option><option value="yi">Yiddish</option></select></td><td width="13%" align="center">&nbsp;</td><td width="8%" align="center"><div id="SL_TTS_voice" title="Listen to the translation"></div></td><td width="8%" align="center"><div class="SL_copy_hand" id="SL_copy" title="Select text"></div></td><td width="8%" align="center"><div class="SL_font_off" id="SL_bbl_font" title="Font size"></div></td><td width="5%"></td><td width="8%" align="right"><div class="SL_pin_off" id="SL_pin" title="Pin pup-up bubble"></div></td></tr></tbody></table></div></div><div id="SL_shadow_translation_result"></div><div id="SL_bbl_donate" title="Make a small contribution"></div><div id="SL_Balloon_options"><a href="chrome-extension://noaijdpnepcgjemiklgfkcfbkokogabh/options-bbl.html" target="_blank" class="SL_options" title="Show options">Options</a></div></div></div></body></html>